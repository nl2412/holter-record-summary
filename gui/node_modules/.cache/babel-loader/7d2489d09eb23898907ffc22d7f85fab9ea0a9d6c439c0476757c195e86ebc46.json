{"ast":null,"code":"var _jsxFileName = \"/Users/dustlinger/Documents/holter-record-summary/gui/src/components/UploadForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadForm = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [recordingDate, setRecordingDate] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('recording_date', recordingDate);\n    try {\n      if (recordingDate) formData.append(\"start_time\", recordingDate);\n      const res = await axios.post(\"http://localhost:8081/api/v1/delineation\", formData);\n\n      // Dispatch results to Results component\n      window.dispatchEvent(new CustomEvent('analysisResults', {\n        detail: res.data\n      }));\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Failed to analyze the file: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"upload-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Upload ECG Delineation CSV:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        accept: \".csv\",\n        onChange: e => setFile(e.target.files[0]),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"recordingDate\",\n        children: \"Recording Date (Optional):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        id: \"recordingDate\",\n        value: recordingDate,\n        onChange: e => setRecordingDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: loading || !file,\n      children: loading ? 'Processing...' : 'Analyze'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadForm, \"qXyf7ZWLMIrFQAYaoolRmlE5B+E=\");\n_c = UploadForm;\nexport default UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","UploadForm","_s","file","setFile","recordingDate","setRecordingDate","loading","setLoading","handleSubmit","e","preventDefault","formData","FormData","append","res","axios","post","window","dispatchEvent","CustomEvent","detail","data","error","console","alert","message","onSubmit","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","accept","onChange","target","files","required","value","disabled","_c","$RefreshReg$"],"sources":["/Users/dustlinger/Documents/holter-record-summary/gui/src/components/UploadForm.js"],"sourcesContent":["import { useState } from 'react';\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [recordingDate, setRecordingDate] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('recording_date', recordingDate);\n\n    try {\n      if (recordingDate) formData.append(\"start_time\", recordingDate);\n      const res = await axios.post(\"http://localhost:8081/api/v1/delineation\", formData);\n      \n      // Dispatch results to Results component\n      window.dispatchEvent(new CustomEvent('analysisResults', { detail: res.data }));\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Failed to analyze the file: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"upload-form\">\n      <div className=\"form-group\">\n        <label htmlFor=\"file\">Upload ECG Delineation CSV:</label>\n        <input\n          type=\"file\"\n          id=\"file\"\n          accept=\".csv\"\n          onChange={(e) => setFile(e.target.files[0])}\n          required\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"recordingDate\">Recording Date (Optional):</label>\n        <input\n          type=\"datetime-local\"\n          id=\"recordingDate\"\n          value={recordingDate}\n          onChange={(e) => setRecordingDate(e.target.value)}\n        />\n      </div>\n      <button type=\"submit\" disabled={loading || !file}>\n        {loading ? 'Processing...' : 'Analyze'}\n      </button>\n    </form>\n  );\n};\n\nexport default UploadForm;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBH,UAAU,CAAC,IAAI,CAAC;IAEhB,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEX,IAAI,CAAC;IAC7BS,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAET,aAAa,CAAC;IAEhD,IAAI;MACF,IAAIA,aAAa,EAAEO,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAET,aAAa,CAAC;MAC/D,MAAMU,GAAG,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,0CAA0C,EAAEL,QAAQ,CAAC;;MAElF;MACAM,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,iBAAiB,EAAE;QAAEC,MAAM,EAAEN,GAAG,CAACO;MAAK,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BE,KAAK,CAAC,8BAA8B,GAAGF,KAAK,CAACG,OAAO,CAAC;IACvD,CAAC,SAAS;MACRlB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACER,OAAA;IAAM2B,QAAQ,EAAElB,YAAa;IAACmB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACnD7B,OAAA;MAAK4B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB7B,OAAA;QAAO8B,OAAO,EAAC,MAAM;QAAAD,QAAA,EAAC;MAA2B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzDlC,OAAA;QACEmC,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,MAAM;QACTC,MAAM,EAAC,MAAM;QACbC,QAAQ,EAAG5B,CAAC,IAAKN,OAAO,CAACM,CAAC,CAAC6B,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;QAC5CC,QAAQ;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNlC,OAAA;MAAK4B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB7B,OAAA;QAAO8B,OAAO,EAAC,eAAe;QAAAD,QAAA,EAAC;MAA0B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACjElC,OAAA;QACEmC,IAAI,EAAC,gBAAgB;QACrBC,EAAE,EAAC,eAAe;QAClBM,KAAK,EAAErC,aAAc;QACrBiC,QAAQ,EAAG5B,CAAC,IAAKJ,gBAAgB,CAACI,CAAC,CAAC6B,MAAM,CAACG,KAAK;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNlC,OAAA;MAAQmC,IAAI,EAAC,QAAQ;MAACQ,QAAQ,EAAEpC,OAAO,IAAI,CAACJ,IAAK;MAAA0B,QAAA,EAC9CtB,OAAO,GAAG,eAAe,GAAG;IAAS;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAAChC,EAAA,CArDID,UAAU;AAAA2C,EAAA,GAAV3C,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}